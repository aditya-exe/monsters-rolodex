{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","name","email","CardList","monsters","map","id","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAK,qEAExB,6BACKH,EAAMI,QAAQC,OAGnB,4BACKL,EAAMI,QAAQE,YCRdC,G,MAAW,SAACP,GAAD,OACpB,qBAAKC,UAAU,YAAf,SAEQD,EAAMQ,SAASC,KACX,SAAAL,GAAO,OACH,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQM,WCN1BC,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOZ,UAAW,SACXa,KAAM,SACNF,YAAaA,EACbG,SAAUF,MCiCNG,E,kDAlCb,aAAe,IAAD,8BACZ,gBAcFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IALH,E,qDASd,WAAqB,IAAD,OAClBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,OACtBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAAUmB,Y,oBAOlD,WAAU,IAAD,EACyBC,KAAKN,MAA9Bd,EADA,EACAA,SAAUW,EADV,EACUA,YACXU,EAAmBrB,EAASsB,QAAO,SAAA1B,GAAO,OAAIA,EAAQC,KAAK0B,cAAcC,SAASb,EAAYY,kBACpG,OACI,sBAAK9B,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CAAWW,YAAa,kBACbC,aAAce,KAAKf,eAE9B,cAAC,EAAD,CAAUL,SAAUqB,W,GA7BZI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5BZ,M","file":"static/js/main.30be47bb.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img alt=\"monster\" src={\"https://robohash.org/`${props.monster.id}`?set=set2&size=180x180\"}/>\r\n\r\n        <h2>\r\n            {props.monster.name}\r\n        </h2>\r\n\r\n        <p>\r\n            {props.monster.email}\r\n        </p>\r\n    </div>\r\n)\r\n","import React from 'react'\r\nimport {Card} from '../card/card.component.jsx'\r\nimport './card-list.styles.css'\r\n\r\nexport const CardList = (props) => (\r\n    <div className='card-list'>\r\n        {\r\n            props.monsters.map(\r\n                monster => (\r\n                    <Card key={monster.id} monster={monster}/>\r\n                )\r\n            )\r\n        }\r\n    </div>\r\n)","import React from 'react'\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input className={'search'}\r\n           type={'search'}\r\n           placeholder={placeholder}\r\n           onChange={handleChange}\r\n    />\r\n)","import React, {Component} from 'react';\nimport './App.css';\nimport {CardList} from \"./components/card-list/card-list.component\";\nimport {SearchBox} from \"./components/search-box/search-box.component\"\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: \"\"\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json()\n            .then(users => this.setState({monsters: users})))\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value})\n  }\n\n  render() {\n    const {monsters, searchField} = this.state\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n        <div className=\"App\">\n          <h1> Monsters Rolodex </h1>\n          <SearchBox placeholder={\"Search Monsters\"}\n                     handleChange={this.handleChange}\n          />\n          <CardList monsters={filteredMonsters}/>\n        </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}